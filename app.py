import streamlit as st
import pandas as pd
import uuid

st.set_page_config(page_title="Calculadora de M√©dia Escolar", layout="centered")

# Inicializa o estado da sess√£o
if "dados" not in st.session_state:
    st.session_state["dados"] = []

st.title("üìö Calculadora de M√©dia Escolar")

# Layout com colunas para nome e s√©rie
col1, col2 = st.columns(2)
with col1:
    nome = st.text_input("Nome do aluno")
with col2:
    serie = st.selectbox(
        "S√©rie do aluno", 
        ["1¬∫ ano", "2¬∫ ano", "3¬∫ ano", "4¬∫ ano", "5¬∫ ano", 
         "6¬∫ ano", "7¬∫ ano", "8¬∫ ano", "9¬∫ ano", 
         "1¬∫ ano EM", "2¬∫ ano EM", "3¬∫ ano EM"]
    )

st.markdown("### Notas das Avalia√ß√µes")
avaliacoes = []
for i in range(1, 5):
    nota = st.number_input(f"{i}¬™ Avalia√ß√£o", min_value=0.0, max_value=10.0, step=0.1, key=f"nota_{i}")
    avaliacoes.append(nota)

if st.button("üìä Calcular"):
    if not nome.strip():
        st.warning("Por favor, insira o nome do aluno.")
        st.stop()

    notas_validas = [nota for nota in avaliacoes if isinstance(nota, float)]
    
    if notas_validas:
        media = sum(notas_validas) / len(notas_validas)
        situacao = "Aprovado(a)" if media >= 7 else "Reprovado(a)"

        st.success(f"‚úÖ M√©dia do aluno **{nome}** ({serie}): **{media:.2f}** - **{situacao}**")

        st.session_state["dados"].append({
            "ID": str(uuid.uuid4()),
            "Nome": nome,
            "S√©rie": serie,
            "Primeira Avalia√ß√£o": avaliacoes[0],
            "Segunda Avalia√ß√£o": avaliacoes[1],
            "Terceira Avalia√ß√£o": avaliacoes[2],
            "Quarta Avalia√ß√£o": avaliacoes[3],
            "M√©dia": round(media, 2),
            "Situa√ß√£o": situacao
        })

        st.rerun()
    else:
        st.warning("Preencha pelo menos uma nota v√°lida para calcular a m√©dia.")

# Exibir hist√≥rico com filtros e exclus√£o
if st.session_state["dados"]:
    st.markdown("---")
    st.subheader("üìã Hist√≥rico de Alunos")

    df = pd.DataFrame(st.session_state["dados"])

    filtro_nome = st.text_input("üîç Buscar por nome")
    if filtro_nome:
        df = df[df["Nome"].str.contains(filtro_nome, case=False)]

    st.dataframe(df.drop(columns=["ID"]), use_container_width=True)

    if not df.empty:
        aluno_excluir = st.selectbox("Selecione um aluno para excluir:", 
                                     options=df["Nome"] + " - " + df["ID"].str[:8])
        if st.button("üóëÔ∏è Excluir aluno"):
            id_excluir = aluno_excluir.split(" - ")[-1]
            st.session_state["dados"] = [d for d in st.session_state["dados"] if not d["ID"].startswith(id_excluir)]
            st.success("Aluno exclu√≠do com sucesso!")
            st.experimental_rerun()

    # Bot√£o para baixar CSV
   # Define a ordem das colunas manualmente
colunas_ordenadas = [
    "Nome", "S√©rie", 
    "Primeira Avalia√ß√£o", "Segunda Avalia√ß√£o", 
    "Terceira Avalia√ß√£o", "Quarta Avalia√ß√£o", 
    "M√©dia", "Situa√ß√£o"
]

df_formatado = df[colunas_ordenadas]

# Gera CSV limpo e formatado
csv = df_formatado.to_csv(index=False, sep=',', encoding='utf-8')

# Bot√£o para download
st.download_button(
    label="‚¨áÔ∏è Baixar hist√≥rico como CSV",
    data=csv,
    file_name="notas_alunos.csv",
    mime="text/csv"
)
